// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.11.4
// source: blackjack.proto

package plr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TableState int32

const (
	TableState_Init   TableState = 0 // 初始状态
	TableState_Deal   TableState = 1 // 玩牌状态
	TableState_Settle TableState = 2 // 结算状态
)

// Enum value maps for TableState.
var (
	TableState_name = map[int32]string{
		0: "Init",
		1: "Deal",
		2: "Settle",
	}
	TableState_value = map[string]int32{
		"Init":   0,
		"Deal":   1,
		"Settle": 2,
	}
)

func (x TableState) Enum() *TableState {
	p := new(TableState)
	*p = x
	return p
}

func (x TableState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableState) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[0].Descriptor()
}

func (TableState) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[0]
}

func (x TableState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableState.Descriptor instead.
func (TableState) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

// 玩家操作类型
type OpType int32

const (
	OpType_None      OpType = 0 // 默认空值
	OpType_Bet       OpType = 1 // 下注
	OpType_Hit       OpType = 2 // 要牌
	OpType_Stand     OpType = 3 // 停牌
	OpType_Split     OpType = 4 // 分牌
	OpType_Double    OpType = 5 // 加倍
	OpType_Surrender OpType = 6 // 投降
	OpType_Insurance OpType = 7 // 保险
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "None",
		1: "Bet",
		2: "Hit",
		3: "Stand",
		4: "Split",
		5: "Double",
		6: "Surrender",
		7: "Insurance",
	}
	OpType_value = map[string]int32{
		"None":      0,
		"Bet":       1,
		"Hit":       2,
		"Stand":     3,
		"Split":     4,
		"Double":    5,
		"Surrender": 6,
		"Insurance": 7,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[1].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[1]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{1}
}

// 玩家信息
type PlayerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`       // 用户ID
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`           // 用户名称
	SeatID        int32                  `protobuf:"varint,3,opt,name=SeatID,proto3" json:"SeatID,omitempty"`      // 座位ID
	Balance       int32                  `protobuf:"varint,4,opt,name=Balance,proto3" json:"Balance,omitempty"`    // 玩家金币
	Cards         []int32                `protobuf:"varint,5,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 玩家手牌列表信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	mi := &file_blackjack_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetSeatID() int32 {
	if x != nil {
		return x.SeatID
	}
	return 0
}

func (x *PlayerInfo) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PlayerInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 桌子信息
type TableInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoomID         int32                  `protobuf:"varint,1,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	TableID        int32                  `protobuf:"varint,2,opt,name=TableID,proto3" json:"TableID,omitempty"`
	GameID         int32                  `protobuf:"varint,3,opt,name=GameID,proto3" json:"GameID,omitempty"`
	DealerID       string                 `protobuf:"bytes,4,opt,name=DealerID,proto3" json:"DealerID,omitempty"`                              // 庄家ID
	Players        []*PlayerInfo          `protobuf:"bytes,5,rep,name=Players,proto3" json:"Players,omitempty"`                                // 玩家信息
	CurrTableState TableState             `protobuf:"varint,6,opt,name=CurrTableState,proto3,enum=TableState" json:"CurrTableState,omitempty"` // 当前桌子状态
	CurrOpPlayerID string                 `protobuf:"bytes,7,opt,name=CurrOpPlayerID,proto3" json:"CurrOpPlayerID,omitempty"`                  // 当前操作玩家ID
	CurrOpEndTime  int32                  `protobuf:"varint,8,opt,name=CurrOpEndTime,proto3" json:"CurrOpEndTime,omitempty"`                   // 当前操作结束时间戳
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_blackjack_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{1}
}

func (x *TableInfo) GetRoomID() int32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *TableInfo) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *TableInfo) GetGameID() int32 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *TableInfo) GetDealerID() string {
	if x != nil {
		return x.DealerID
	}
	return ""
}

func (x *TableInfo) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TableInfo) GetCurrTableState() TableState {
	if x != nil {
		return x.CurrTableState
	}
	return TableState_Init
}

func (x *TableInfo) GetCurrOpPlayerID() string {
	if x != nil {
		return x.CurrOpPlayerID
	}
	return ""
}

func (x *TableInfo) GetCurrOpEndTime() int32 {
	if x != nil {
		return x.CurrOpEndTime
	}
	return 0
}

// 玩家操作请求
type C3010002 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 用户ID
	OpType        OpType                 `protobuf:"varint,2,opt,name=OpType,proto3,enum=OpType" json:"OpType,omitempty"` // 操作类型
	BetAmount     int32                  `protobuf:"varint,3,opt,name=BetAmount,proto3" json:"BetAmount,omitempty"`       // 下注操作类型时，对应的下注的金额，其他操作类型忽略字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C3010002) Reset() {
	*x = C3010002{}
	mi := &file_blackjack_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C3010002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C3010002) ProtoMessage() {}

func (x *C3010002) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C3010002.ProtoReflect.Descriptor instead.
func (*C3010002) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{2}
}

func (x *C3010002) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *C3010002) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType_None
}

func (x *C3010002) GetBetAmount() int32 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

type S3010002 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RetCode       int32                  `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`    // 状态码
	Cards         []int32                `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 要牌操作对应要的牌列表
	Balance       int32                  `protobuf:"varint,3,opt,name=Balance,proto3" json:"Balance,omitempty"`    // 玩家身上的金币
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3010002) Reset() {
	*x = S3010002{}
	mi := &file_blackjack_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3010002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3010002) ProtoMessage() {}

func (x *S3010002) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3010002.ProtoReflect.Descriptor instead.
func (*S3010002) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{3}
}

func (x *S3010002) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *S3010002) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *S3010002) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 用户重入
type C3010003 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	RoomID        int32                  `protobuf:"varint,3,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	TableID       int32                  `protobuf:"varint,4,opt,name=TableID,proto3" json:"TableID,omitempty"`
	SeatNo        int32                  `protobuf:"varint,5,opt,name=SeatNo,proto3" json:"SeatNo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C3010003) Reset() {
	*x = C3010003{}
	mi := &file_blackjack_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C3010003) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C3010003) ProtoMessage() {}

func (x *C3010003) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C3010003.ProtoReflect.Descriptor instead.
func (*C3010003) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{4}
}

func (x *C3010003) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *C3010003) GetRoomID() int32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *C3010003) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *C3010003) GetSeatNo() int32 {
	if x != nil {
		return x.SeatNo
	}
	return 0
}

type S3010003 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RetCode       int32                  `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`    // 状态码
	TableInfo     *TableInfo             `protobuf:"bytes,2,opt,name=TableInfo,proto3" json:"TableInfo,omitempty"` // 桌子信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3010003) Reset() {
	*x = S3010003{}
	mi := &file_blackjack_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3010003) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3010003) ProtoMessage() {}

func (x *S3010003) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3010003.ProtoReflect.Descriptor instead.
func (*S3010003) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{5}
}

func (x *S3010003) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *S3010003) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// 进入房间通知（所有玩家）
type P3010001 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableInfo     *TableInfo             `protobuf:"bytes,1,opt,name=TableInfo,proto3" json:"TableInfo,omitempty"` // 桌子信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P3010001) Reset() {
	*x = P3010001{}
	mi := &file_blackjack_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3010001) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3010001) ProtoMessage() {}

func (x *P3010001) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3010001.ProtoReflect.Descriptor instead.
func (*P3010001) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{6}
}

func (x *P3010001) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// 发牌通知（所有玩家）
type P3010002 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableID       int32                  `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	CardInfos     []*P3010002_CardInfo   `protobuf:"bytes,2,rep,name=CardInfos,proto3" json:"CardInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P3010002) Reset() {
	*x = P3010002{}
	mi := &file_blackjack_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3010002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3010002) ProtoMessage() {}

func (x *P3010002) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3010002.ProtoReflect.Descriptor instead.
func (*P3010002) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{7}
}

func (x *P3010002) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *P3010002) GetCardInfos() []*P3010002_CardInfo {
	if x != nil {
		return x.CardInfos
	}
	return nil
}

// 玩家操作通知（桌子其它玩家）
type P3010003 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableID       int32                  `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`           // 桌子ID
	UserID        string                 `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 用户ID
	OpType        OpType                 `protobuf:"varint,3,opt,name=OpType,proto3,enum=OpType" json:"OpType,omitempty"` // 操作类型
	BetAmount     int32                  `protobuf:"varint,4,opt,name=BetAmount,proto3" json:"BetAmount,omitempty"`       // 下注操作类型时，对应的下注的金额，其他操作类型忽略字段
	Balance       int32                  `protobuf:"varint,5,opt,name=Balance,proto3" json:"Balance,omitempty"`           // 玩家身上的金币
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P3010003) Reset() {
	*x = P3010003{}
	mi := &file_blackjack_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3010003) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3010003) ProtoMessage() {}

func (x *P3010003) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3010003.ProtoReflect.Descriptor instead.
func (*P3010003) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{8}
}

func (x *P3010003) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *P3010003) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *P3010003) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType_None
}

func (x *P3010003) GetBetAmount() int32 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *P3010003) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 当前桌子状态通知（所有玩家）
type P3010004 struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TableID        int32                  `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`                               // 桌子ID
	CurrTableState TableState             `protobuf:"varint,2,opt,name=CurrTableState,proto3,enum=TableState" json:"CurrTableState,omitempty"` // 当前桌子状态
	CurrOpPlayerID string                 `protobuf:"bytes,3,opt,name=CurrOpPlayerID,proto3" json:"CurrOpPlayerID,omitempty"`                  // 当前操作玩家ID
	CurrOpEndTime  int32                  `protobuf:"varint,4,opt,name=CurrOpEndTime,proto3" json:"CurrOpEndTime,omitempty"`                   // 当前操作结束时间戳
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *P3010004) Reset() {
	*x = P3010004{}
	mi := &file_blackjack_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3010004) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3010004) ProtoMessage() {}

func (x *P3010004) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3010004.ProtoReflect.Descriptor instead.
func (*P3010004) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{9}
}

func (x *P3010004) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *P3010004) GetCurrTableState() TableState {
	if x != nil {
		return x.CurrTableState
	}
	return TableState_Init
}

func (x *P3010004) GetCurrOpPlayerID() string {
	if x != nil {
		return x.CurrOpPlayerID
	}
	return ""
}

func (x *P3010004) GetCurrOpEndTime() int32 {
	if x != nil {
		return x.CurrOpEndTime
	}
	return 0
}

type P3010002_CardInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`       // 用户ID
	Cards         []int32                `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 要牌操作对应要的牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P3010002_CardInfo) Reset() {
	*x = P3010002_CardInfo{}
	mi := &file_blackjack_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3010002_CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3010002_CardInfo) ProtoMessage() {}

func (x *P3010002_CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3010002_CardInfo.ProtoReflect.Descriptor instead.
func (*P3010002_CardInfo) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{7, 0}
}

func (x *P3010002_CardInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *P3010002_CardInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

var File_blackjack_proto protoreflect.FileDescriptor

const file_blackjack_proto_rawDesc = "" +
	"\n" +
	"\x0fblackjack.proto\"\x80\x01\n" +
	"\n" +
	"PlayerInfo\x12\x16\n" +
	"\x06UserID\x18\x01 \x01(\tR\x06UserID\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x16\n" +
	"\x06SeatID\x18\x03 \x01(\x05R\x06SeatID\x12\x18\n" +
	"\aBalance\x18\x04 \x01(\x05R\aBalance\x12\x14\n" +
	"\x05Cards\x18\x05 \x03(\x05R\x05Cards\"\x9b\x02\n" +
	"\tTableInfo\x12\x16\n" +
	"\x06RoomID\x18\x01 \x01(\x05R\x06RoomID\x12\x18\n" +
	"\aTableID\x18\x02 \x01(\x05R\aTableID\x12\x16\n" +
	"\x06GameID\x18\x03 \x01(\x05R\x06GameID\x12\x1a\n" +
	"\bDealerID\x18\x04 \x01(\tR\bDealerID\x12%\n" +
	"\aPlayers\x18\x05 \x03(\v2\v.PlayerInfoR\aPlayers\x123\n" +
	"\x0eCurrTableState\x18\x06 \x01(\x0e2\v.TableStateR\x0eCurrTableState\x12&\n" +
	"\x0eCurrOpPlayerID\x18\a \x01(\tR\x0eCurrOpPlayerID\x12$\n" +
	"\rCurrOpEndTime\x18\b \x01(\x05R\rCurrOpEndTime\"a\n" +
	"\bC3010002\x12\x16\n" +
	"\x06UserID\x18\x01 \x01(\tR\x06UserID\x12\x1f\n" +
	"\x06OpType\x18\x02 \x01(\x0e2\a.OpTypeR\x06OpType\x12\x1c\n" +
	"\tBetAmount\x18\x03 \x01(\x05R\tBetAmount\"T\n" +
	"\bS3010002\x12\x18\n" +
	"\aRetCode\x18\x01 \x01(\x05R\aRetCode\x12\x14\n" +
	"\x05Cards\x18\x02 \x03(\x05R\x05Cards\x12\x18\n" +
	"\aBalance\x18\x03 \x01(\x05R\aBalance\"l\n" +
	"\bC3010003\x12\x16\n" +
	"\x06UserID\x18\x01 \x01(\tR\x06UserID\x12\x16\n" +
	"\x06RoomID\x18\x03 \x01(\x05R\x06RoomID\x12\x18\n" +
	"\aTableID\x18\x04 \x01(\x05R\aTableID\x12\x16\n" +
	"\x06SeatNo\x18\x05 \x01(\x05R\x06SeatNo\"N\n" +
	"\bS3010003\x12\x18\n" +
	"\aRetCode\x18\x01 \x01(\x05R\aRetCode\x12(\n" +
	"\tTableInfo\x18\x02 \x01(\v2\n" +
	".TableInfoR\tTableInfo\"4\n" +
	"\bP3010001\x12(\n" +
	"\tTableInfo\x18\x01 \x01(\v2\n" +
	".TableInfoR\tTableInfo\"\x90\x01\n" +
	"\bP3010002\x12\x18\n" +
	"\aTableID\x18\x01 \x01(\x05R\aTableID\x120\n" +
	"\tCardInfos\x18\x02 \x03(\v2\x12.P3010002.CardInfoR\tCardInfos\x1a8\n" +
	"\bCardInfo\x12\x16\n" +
	"\x06UserID\x18\x01 \x01(\tR\x06UserID\x12\x14\n" +
	"\x05Cards\x18\x02 \x03(\x05R\x05Cards\"\x95\x01\n" +
	"\bP3010003\x12\x18\n" +
	"\aTableID\x18\x01 \x01(\x05R\aTableID\x12\x16\n" +
	"\x06UserID\x18\x02 \x01(\tR\x06UserID\x12\x1f\n" +
	"\x06OpType\x18\x03 \x01(\x0e2\a.OpTypeR\x06OpType\x12\x1c\n" +
	"\tBetAmount\x18\x04 \x01(\x05R\tBetAmount\x12\x18\n" +
	"\aBalance\x18\x05 \x01(\x05R\aBalance\"\xa7\x01\n" +
	"\bP3010004\x12\x18\n" +
	"\aTableID\x18\x01 \x01(\x05R\aTableID\x123\n" +
	"\x0eCurrTableState\x18\x02 \x01(\x0e2\v.TableStateR\x0eCurrTableState\x12&\n" +
	"\x0eCurrOpPlayerID\x18\x03 \x01(\tR\x0eCurrOpPlayerID\x12$\n" +
	"\rCurrOpEndTime\x18\x04 \x01(\x05R\rCurrOpEndTime*,\n" +
	"\n" +
	"TableState\x12\b\n" +
	"\x04Init\x10\x00\x12\b\n" +
	"\x04Deal\x10\x01\x12\n" +
	"\n" +
	"\x06Settle\x10\x02*d\n" +
	"\x06OpType\x12\b\n" +
	"\x04None\x10\x00\x12\a\n" +
	"\x03Bet\x10\x01\x12\a\n" +
	"\x03Hit\x10\x02\x12\t\n" +
	"\x05Stand\x10\x03\x12\t\n" +
	"\x05Split\x10\x04\x12\n" +
	"\n" +
	"\x06Double\x10\x05\x12\r\n" +
	"\tSurrender\x10\x06\x12\r\n" +
	"\tInsurance\x10\aB\aZ\x05./plrb\x06proto3"

var (
	file_blackjack_proto_rawDescOnce sync.Once
	file_blackjack_proto_rawDescData []byte
)

func file_blackjack_proto_rawDescGZIP() []byte {
	file_blackjack_proto_rawDescOnce.Do(func() {
		file_blackjack_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackjack_proto_rawDesc), len(file_blackjack_proto_rawDesc)))
	})
	return file_blackjack_proto_rawDescData
}

var file_blackjack_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_blackjack_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_blackjack_proto_goTypes = []any{
	(TableState)(0),           // 0: TableState
	(OpType)(0),               // 1: OpType
	(*PlayerInfo)(nil),        // 2: PlayerInfo
	(*TableInfo)(nil),         // 3: TableInfo
	(*C3010002)(nil),          // 4: C3010002
	(*S3010002)(nil),          // 5: S3010002
	(*C3010003)(nil),          // 6: C3010003
	(*S3010003)(nil),          // 7: S3010003
	(*P3010001)(nil),          // 8: P3010001
	(*P3010002)(nil),          // 9: P3010002
	(*P3010003)(nil),          // 10: P3010003
	(*P3010004)(nil),          // 11: P3010004
	(*P3010002_CardInfo)(nil), // 12: P3010002.CardInfo
}
var file_blackjack_proto_depIdxs = []int32{
	2,  // 0: TableInfo.Players:type_name -> PlayerInfo
	0,  // 1: TableInfo.CurrTableState:type_name -> TableState
	1,  // 2: C3010002.OpType:type_name -> OpType
	3,  // 3: S3010003.TableInfo:type_name -> TableInfo
	3,  // 4: P3010001.TableInfo:type_name -> TableInfo
	12, // 5: P3010002.CardInfos:type_name -> P3010002.CardInfo
	1,  // 6: P3010003.OpType:type_name -> OpType
	0,  // 7: P3010004.CurrTableState:type_name -> TableState
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_blackjack_proto_init() }
func file_blackjack_proto_init() {
	if File_blackjack_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackjack_proto_rawDesc), len(file_blackjack_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackjack_proto_goTypes,
		DependencyIndexes: file_blackjack_proto_depIdxs,
		EnumInfos:         file_blackjack_proto_enumTypes,
		MessageInfos:      file_blackjack_proto_msgTypes,
	}.Build()
	File_blackjack_proto = out.File
	file_blackjack_proto_goTypes = nil
	file_blackjack_proto_depIdxs = nil
}
